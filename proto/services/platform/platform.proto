syntax = "proto3";

package platform;

option go_package = "stratium/services/platform";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// PlatformService provides decision and entitlement management
service PlatformService {
    // GetDecision retrieves a decision based on the provided criteria
    rpc GetDecision(GetDecisionRequest) returns (GetDecisionResponse);

    // GetEntitlements retrieves entitlements for a given subject
    rpc GetEntitlements(GetEntitlementsRequest) returns (GetEntitlementsResponse);
}

// Request message for GetDecision
message GetDecisionRequest {
    // Subject making the request (e.g., user ID, service ID)
    map<string, google.protobuf.Value> subject_attributes = 1;

    // Resource being accessed
    map<string, string> resource_attributes = 2;

    // Action being performed
    string action = 3;

    // Additional context for the decision
    map<string, string> context = 4;

    // Optional policy ID to evaluate against
    string policy_id = 5;
}

// Response message for GetDecision
message GetDecisionResponse {
    // Decision result
    Decision decision = 1;

    // Reason for the decision
    string reason = 2;

    // Additional details about the decision
    map<string, string> details = 3;

    // Timestamp when the decision was made
    google.protobuf.Timestamp timestamp = 4;

    // Policy that was evaluated
    string evaluated_policy = 5;
}

// Decision enum
enum Decision {
    DECISION_UNSPECIFIED = 0;
    DECISION_ALLOW = 1;
    DECISION_DENY = 2;
    DECISION_CONDITIONAL = 3;
}

// Request message for GetEntitlements
message GetEntitlementsRequest {
    // Subject to get entitlements for
    map<string, google.protobuf.Value> subject = 1;

    // Optional resource filter
    string resource_filter = 2;

    // Optional action filter
    string action_filter = 3;

    // Optional context for entitlement evaluation
    map<string, string> context = 4;

    // Pagination token
    string page_token = 5;

    // Page size (default: 50, max: 1000)
    int32 page_size = 6;
}

// Response message for GetEntitlements
message GetEntitlementsResponse {
    // List of entitlements
    repeated Entitlement entitlements = 1;

    // Next page token (empty if no more pages)
    string next_page_token = 2;

    // Total count of entitlements (optional)
    int64 total_count = 3;

    // Timestamp when entitlements were retrieved
    google.protobuf.Timestamp timestamp = 4;
}

// Entitlement represents a permission or access right
message Entitlement {
    // Unique identifier for the entitlement
    string id = 1;

    // Subject the entitlement applies to
    string subject = 2;

    // Resource the entitlement grants access to
    string resource = 3;

    // Actions allowed on the resource
    repeated string actions = 4;

    // Conditions that must be met for the entitlement to be valid
    repeated Condition conditions = 5;

    // Entitlement metadata
    map<string, string> metadata = 6;

    // When the entitlement was created
    google.protobuf.Timestamp created_at = 7;

    // When the entitlement expires (optional)
    google.protobuf.Timestamp expires_at = 8;

    // Whether the entitlement is active
    bool active = 9;
}

// Condition represents a condition that must be met
message Condition {
    // Type of condition (e.g., "time", "location", "attribute")
    string type = 1;

    // Operator for the condition (e.g., "equals", "contains", "greater_than")
    string operator = 2;

    // Value to compare against
    string value = 3;

    // Additional parameters for the condition
    map<string, string> parameters = 4;
}